def forChat(msg, id, user_id, db, vk_session, longpoll, admins, about_system, configWork, logger, technical, help, ts, commands):

    # Send the message with vk_api in the chat.
    def senderChat(id, text):
        vk_session.method("messages.send", {"peer_id" : id, "message" : text, "random_id" : 0})

    # If the user already has an account, it writes about this fact, if the user typed "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" ("registation") or other like this.  
    if (msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" or msg[0].lower() == "—Ä–µ–≥" or msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Å—å") and (db.account_exists(user_id, None) == True):
        senderChat(id, f'–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç.')

    # Check than account exists in the system.
    if db.account_exists(user_id, None) == False:
        pass

    else:

        tag = f"@id{user_id}({db.get_account_info(user_id, None)[0][2]})"  # mention of the user with the database name.
        
        # Write the info about the account.
        if ((msg[0].lower() == "–º–æ–π") and ((msg[1].lower() == "—Å—á—ë—Ç") or (msg[1].lower() == "—Å—á–µ—Ç"))) or (msg[0].lower() == "–ø—Ä–æ—Ñ–∏–ª—å") or (msg[0].lower() == "–±–∞–ª–∞–Ω—Å"):
            senderChat(id, f"{tag}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç: \n\nüÜî ID: {db.get_account_info(user_id, None)[0][0]} \nüí≥ –°—Ä–µ–¥—Å—Ç–≤–∞: {round(db.get_account_info(user_id, None)[0][1])}")

        # Transfer money command. Sample: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ 11 1 000"
        elif msg[0].lower() == "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏":
            senderChat(id, commands.MoneyTransfer(db, logger, technical, vk_session).main(user_id, msg))
        
        # Business commands. Sample: "–ë–∏–∑–Ω–µ—Å SGRE –∑–∞—á–∏—Å–ª–∏—Ç—å 1 000 000".           
        elif msg[0].lower() == "–±–∏–∑–Ω–µ—Å":

            if len(msg) > 1:

                # Check than in the message is four words: key word, business_id, key word, cash_interact.
                if len(msg) == 4:
    
                    # Check that the user want to withdraw or credit cash.
                    if (msg[2].lower() == "—Å–Ω—è—Ç—å") or (msg[2].lower() == "–∑–∞—á–∏—Å–ª–∏—Ç—å"):
        
                        cash_interact = ""  # It is the withdraw or credit cash. 
    
                        # If the value of the cash to post is splited by spaces, this loop unites it.
                        for i in range(3, len(msg)):
                            cash_interact = cash_interact + msg[i]
    
                        # Check that all chars of cash_posted are numbers.
                        if all("0" <= s <= "9" for s in cash_interact):
    
                            # If the user want to withdraw.
                            if msg[2].lower() == "—Å–Ω—è—Ç—å":
                                senderChat(id, db.business_withdraw(user_id, msg[1], cash_interact))
                            
                            # If the user want to credit.
                            if msg[2].lower() == "–∑–∞—á–∏—Å–ª–∏—Ç—å":
                                senderChat(id, db.business_crediting(user_id, msg[1], cash_interact))
                        else:
                            senderChat(id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.")
    
                # If the user wants to see the info about a business.
                elif len(msg) == 2:
    
                    info = db.business_info(user_id, msg[1])  # Business info: name, type and cash.
        
                    # Check that all right and the method retudned a list or a tuple (all ok).
                    if isinstance(info, (list, tuple)):
        
                        business_name = info[0][0]  # Name
                        business_type = info[0][1]  # Type
                        business_cash = info[0][2]  # Cash
                        
                        # Send the info.
                        senderChat(id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {tag}! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ {msg[1]}: \n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {business_name} \n\n–¢–∏–ø: {business_type} \n\n–°—Ä–µ–¥—Å—Ç–≤–∞: {round(business_cash)}")
        
                    # If the user doesn`t has the access to this business account.
                    elif info == "BUSINESS_HAVE_NOT_ACCESS":
                        senderChat(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á—ë—Ç—É –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")
                    
                    # If the business doesn`t exist or user typed the wrong ID.
                    elif info == "BUSINESS_DOES_NOT_EXIST":
                        senderChat(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ: –¥–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")

                else:
                    senderChat(id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: \n–ë–∏–∑–Ω–µ—Å [ID –ë–ò–ó–ù–ï–°–ê]")
                
            elif len(msg) == 1:
                senderChat(id, f"{tag}, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å, —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é —Å–ª—É–∂–±—É. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±–µ, –í–∞–º —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É Sigma Research Inc. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –ø–∞—Å–ø–æ—Ä—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π." + db.business_user(user_id))

            else: 
                senderChat(id, f'{tag}, –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n\n–ë–∏–∑–Ω–µ—Å, \n\n–ë–∏–∑–Ω–µ—Å [ID –ë–ò–ó–ù–ï–°–ê], \n\n–ë–∏–∑–Ω–µ—Å [ID –ë–ò–ó–ù–ï–°–ê] —Å–Ω—è—Ç—å/–∑–∞—á–∏—Å–ª–∏—Ç—å [–°–†–ï–î–°–¢–í–ê].')

        
        # Help info
        elif msg[0].lower() == "–ø–æ–º–æ—â—å":
            senderChat(id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {tag}! –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n\n" + " \n\n".join(help))

        # About the system info
        elif (msg[0].lower() == "–æ") and (msg[1].lower() == "—Å–∏—Å—Ç–µ–º–µ"):
            senderChat(id, f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—à—å, —Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å".')                            
            senderChat(id, about_system)

        # Posts info
        elif (msg[0].lower() == "–¥–æ–ª–∂–Ω–æ—Å—Ç–∏"):
            senderChat(id, f'–î–æ–ª–∂–Ω–æ—Å—Ç–∏: \n\n\nüé© –ü—Ä–µ–º—å–µ—Ä-–º–∏–Ω–∏—Å—Ç—Ä: {db.get_posts("premier")[0][1]}\n\nüõ° –ú–∏–Ω–∏—Å—Ç—Ä –æ–±–æ—Ä–æ–Ω—ã: {db.get_posts("dm")[0][1]}\n\nüîí –ú–∏–Ω–∏—Å—Ç—Ä –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –î–µ–ª: {db.get_posts("mia")[0][1]}\n\n‚öï –ú–∏–Ω–∏—Å—Ç—Ä –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {db.get_posts("mh")[0][1]}\n\nüíπ –ú–∏–Ω–∏—Å—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤: {db.get_posts("mf")[0][1]}')


        # Admin commands.
        elif list(msg[0].lower())[0] == "!":
            try:

                # Check that the user is an admin.
                if str(user_id) in admins:

                    # Turn of the system.
                    if msg[0].lower() == "!–≤—ã–∫–ª":
                        senderChat(id, f"–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                        raise SystemExit(0)

                    # Return the id of the chat.
                    elif msg[0].lower() == "!id":
                        senderChat(id, f"ID —á–∞—Ç–∞: {id}")

                    # Set the cash.
                    elif msg[0].lower() == "!—Å—Ä–µ–¥—Å—Ç–≤–∞":
                        senderChat(id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ @id{db.set_money(msg[1], msg[2])[0][0]}({db.get_account_info(None, msg[1])[0][2]}) {msg[2]}.")
                    
                    # Work with the config.
                    elif msg[0].lower().split("_")[0] == "!config":
                        if msg[0].lower().split("_")[1] == "set":
                            if (msg[2] == "True") or (msg[2] == "False"):
                                senderChat(id, configWork.changeValue("Settings", msg[1], msg[2]))
                        elif msg[0].lower().split("_")[1] == "check":
                            senderChat(id, f"{msg[1]}: {msg[2]} == " + configWork.readValue(msg[1], msg[2]))
                    
                    # Work with the posts.
                    elif msg[0].lower() == "!–¥–æ–ª–∂–Ω–æ—Å—Ç—å":
                            db.set_post(msg[1], msg[2] + " " + msg[3])
                            senderChat(id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {msg[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg[2]} {msg[3]}.")

                    # With this we can to collect the taxes with custom coefficients.
                    elif msg[0].lower() == "!–Ω–∞–ª–æ–≥–∏":
                        if len(msg) == 3:
                            ts.tax_collection_for_individuals(float(msg[1]), float(msg[2]))
                            senderChat(id, f"–ù–∞–ª–æ–≥–∏ —Å–æ–±—Ä–∞–Ω—ã. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {float(msg[1])}, {float(msg[2])}")
                        else:
                            senderChat(id, "!–Ω–∞–ª–æ–≥–∏ [–ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ì–†–ê–ñ–î–ê–ù–ï] [–ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ú–ò–ì–†–ê–ù–¢–´]")

            
            except Exception as e: 
                senderChat(id, f"Failed! \nexit code: 1. \nException: {e}.")
                logger.exception(f"Failed with exit code: 1.") 


        # Map
        elif (msg[0].lower() == "–∫–∞—Ä—Ç–∞"):
            map_message = "[–î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´]"
            vk_session.method("messages.send", {"peer_id": id, "message": map_message, "attachment": "photo-‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", "random_id": 0})