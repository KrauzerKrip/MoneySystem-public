def forUser(msg, id, db, vk_session, longpoll, admins, about_system, configWork, logger, technical, help, ts, commands):

    # Send the message with vk_api in the user chat.
    def senderUser(id, text):
        vk_session.method("messages.send", {"user_id" : id, "message" : text, "random_id" : 0})

    # If the user writes any, except "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" (registration) and doesn`t has an account, the system ask for create the account.
    if (msg[0].lower() != "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" and msg[0].lower() != "—Ä–µ–≥" and msg[0].lower() != "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Å—å") and (db.account_exists(id, None) == False) and (len(msg) == 2):
        senderUser(id, f'–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç, –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –∏ –¥–∞–ª–µ–µ –Ω–∏–∫–Ω–µ–π–º –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º. \n–ù–∞–ø—Ä–∏–º–µ—Ä: "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ö–æ—Ç–∏–∫".') 

    # "You successfully opened the account!"
    elif (msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" or msg[0].lower() == "—Ä–µ–≥" or msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Å—å") and (db.account_exists(id, None) == False) and (len(msg) == 2):
        db.add_account(id, msg[1])
        senderUser(id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç. \n–í–∞—à ID: {db.get_account_info(id, None)[0][0]}. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å–ª–∏ –í—ã –∏–º–µ–µ—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ Sigma Research Inc. –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≥—Ä–∞–∂–¥–∞–Ω—Ç—Å–≤–∞ –∫ –í–∞—à–µ–º—É —Å—á—ë—Ç—É, –ø—Ä–∏–ª–æ–∂–∏–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–∞—à –ø–∞—Å–ø–æ—Ä—Ç –∏ ID –≤ —Å–∏—Å—Ç–µ–º–µ.')

    # If the user already has an account, it writes about this fact, if the user typed "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" ("registation") or other like this.  
    elif (msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" or msg[0].lower() == "—Ä–µ–≥" or msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Å—å") and (db.account_exists(id, None) == True):
        senderUser(id, f'–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç.')

    # If the user didn`t write the nickname after "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" (registation).
    elif (msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" or msg[0].lower() == "—Ä–µ–≥" or msg[0].lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Å—å") and (db.account_exists(id, None) == False) and (len(msg) != 2):
        senderUser(id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.')

    # Write the info about the account.
    elif ((msg[0].lower() == "–º–æ–π") and ((msg[1].lower() == "—Å—á—ë—Ç") or (msg[1].lower() == "—Å—á–µ—Ç"))) or (msg[0].lower() == "–ø—Ä–æ—Ñ–∏–ª—å") or (msg[0].lower() == "–±–∞–ª–∞–Ω—Å"):
        senderUser(id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç: \n\nüÜî ID: {db.get_account_info(id, None)[0][0]} \nüí≥ –°—Ä–µ–¥—Å—Ç–≤–∞: {round(db.get_account_info(id, None)[0][1])}")


    elif (msg[0].lower() == "–ø–∞—Å–ø–æ—Ä—Ç"):
        if len(msg) > 1:
            pass

        else: 
            senderUser(id, "–ö–æ–º–∞–Ω–¥—ã –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: \n\n–ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–∏—Ç—å - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ \n\n")

    # Transfer money command. Sample: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ 11 1 000"
    elif msg[0].lower() == "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏":
        senderUser(id, commands.MoneyTransfer(db, logger, technical, vk_session).main(id, msg))

    # Business commands. Sample: "–ë–∏–∑–Ω–µ—Å SGRE –∑–∞—á–∏—Å–ª–∏—Ç—å 1 000 000".           
    elif msg[0].lower() == "–±–∏–∑–Ω–µ—Å":

        if len(msg) > 1:

            # Check than in the message is four words: key word, business_id, key word, cash_interact.
            if len(msg) == 4:

                # Check that the user want to withdraw or credit cash.
                if (msg[2].lower() == "—Å–Ω—è—Ç—å") or (msg[2].lower() == "–∑–∞—á–∏—Å–ª–∏—Ç—å"):
    
                    cash_interact = ""  # It is the withdraw or credit cash. 

                    # If the value of the cash to post is splited by spaces, this loop unites it.
                    for i in range(3, len(msg)):

                        cash_interact = cash_interact + msg[i]

                    # Check that all chars of cash_posted are numbers.
                    if all("0" <= s <= "9" for s in cash_interact):

                        # If the user want to withdraw.
                        if msg[2].lower() == "—Å–Ω—è—Ç—å":
                            senderUser(id, db.business_withdraw(id, msg[1], cash_interact))
                        
                        # If the user want to credit.
                        if msg[2].lower() == "–∑–∞—á–∏—Å–ª–∏—Ç—å":
                            senderUser(id, db.business_crediting(id, msg[1], cash_interact))
                    else:
                        senderUser(id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.")

            # If the user wants to see the info about a business.
            elif len(msg) == 2:

                info = db.business_info(id, msg[1])  # Business info: name, type and cash.
    
                # Check that all right and the method retudned a list or a tuple.
                if isinstance(info, (list, tuple)):
    
                    business_name = info[0][0]  # Name
                    business_type = info[0][1]  # Type
                    business_cash = info[0][2]  # Cash
                    
                    # Send the info.
                    senderUser(id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ {msg[1]}: \n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {business_name} \n\n–¢–∏–ø: {business_type} \n\n–°—Ä–µ–¥—Å—Ç–≤–∞: {round(business_cash)}")
    
                # If the user doesn`t has the access to this business account.
                elif info == "BUSINESS_HAVE_NOT_ACCESS":
                    senderUser(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á—ë—Ç—É –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")
                
                # If the business doesn`t exist or user typed the wrong ID.
                elif info == "BUSINESS_DOES_NOT_EXIST":
                    senderUser(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ: –¥–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
            else:
                senderUser(id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: \n–ë–∏–∑–Ω–µ—Å ID –ë–ò–ó–ù–ï–°–ê]")
            
        elif len(msg) == 1:
            senderUser(id, f"–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å, —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é —Å–ª—É–∂–±—É. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±–µ, –í–∞–º —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É Sigma Research Inc. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: –ø–∞—Å–ø–æ—Ä—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π." + db.business_user(id))

        else: 
            senderUser(id, f'–î–ª—è –±–∏–∑–Ω–µ—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n\n–ë–∏–∑–Ω–µ—Å, \n\n–ë–∏–∑–Ω–µ—Å [ID –ë–ò–ó–ù–ï–°–ê], \n\n–ë–∏–∑–Ω–µ—Å [ID –ë–ò–ó–ù–ï–°–ê] —Å–Ω—è—Ç—å/–∑–∞—á–∏—Å–ª–∏—Ç—å [–°–†–ï–î–°–¢–í–ê].')


    # User notification turning off or on.
    elif msg[0].lower() == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":

        if len(msg) == 2:
            
            # If the user wants to turn on notifications.
            if msg[1].lower() == "–≤–∫–ª":
                db.user_notification_update(id, True)
                senderUser(id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
                logger.info(f"User {id} turned on the notification for him.")

            elif msg[1].lower() == "–≤—ã–∫–ª":
            # If the user wants to turn off notifications.
                db.user_notification_update(id, False)
                senderUser(id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.")
                logger.info(f"User {id} turned off the notification for him.")

            else:
                senderUser(id, '–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ "–≤–∫–ª" –∏–ª–∏ "–≤—ã–∫–ª".')
        else:
            senderUser(id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–∞ \n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª/–≤—ã–∫–ª")


    # Help info
    elif msg[0].lower() == "–ø–æ–º–æ—â—å":
        senderUser(id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, @id{id}({db.get_account_info(id, None)[0][2]})! –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n\n" + " \n\n".join(help))

    # About the system info
    elif (msg[0].lower() == "–æ") and (msg[1].lower() == "—Å–∏—Å—Ç–µ–º–µ"):
        senderUser(id, f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—à—å, —Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å".')                            
        senderUser(id, about_system)  

    elif (msg[0].lower() == "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ") and (msg[1].lower() == "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"):
        pass


    # Admin commands.
    elif list(msg[0].lower())[0] == "!":
        try:

            # Check that the user is an admin.
            if str(id) in admins:

                # Turn of the system.
                if msg[0].lower() == "!–≤—ã–∫–ª":
                    senderUser(id, f"–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                    raise SystemExit(0)

                # Return the id of the chat.
                elif msg[0].lower() == "!id":
                    senderUser(id, f"ID —á–∞—Ç–∞: {id}")

                # Set the cash.
                elif msg[0].lower() == "!—Å—Ä–µ–¥—Å—Ç–≤–∞":
                    senderUser(id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ @id{db.set_money(msg[1], msg[2])[0][0]}({db.get_account_info(None, msg[1])[0][2]}) {msg[2]}.")
                
                # Work with the config.
                elif msg[0].lower().split("_")[0] == "!config":
                    if msg[0].lower().split("_")[1] == "set":
                        if (msg[2] == "True") or (msg[2] == "False"):
                            senderUser(id, configWork.changeValue("Settings", msg[1], msg[2]))
                    elif msg[0].lower().split("_")[1] == "check":
                        senderUser(id, f"{msg[1]}: {msg[2]} == " + configWork.readValue(msg[1], msg[2]))
                
                # Work with the posts.
                elif msg[0].lower() == "!–¥–æ–ª–∂–Ω–æ—Å—Ç—å":
                        db.set_post(msg[1], msg[2] + " " + msg[3])
                        senderUser(id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {msg[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg[2]} {msg[3]}.")

                # With this we can to collect the taxes with custom coefficients.
                elif msg[0].lower() == "!–Ω–∞–ª–æ–≥–∏":
                    if len(msg) == 3:
                        ts.tax_collection_for_individuals(float(msg[1]), float(msg[2]))
                        senderUser(id, f"–ù–∞–ª–æ–≥–∏ —Å–æ–±—Ä–∞–Ω—ã. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {float(msg[1])}, {float(msg[2])}")
                    else:
                        senderUser(id, "!–Ω–∞–ª–æ–≥–∏ [–ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ì–†–ê–ñ–î–ê–ù–ï] [–ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ú–ò–ì–†–ê–ù–¢–´]")
                
                # Admin command to use sqlite3.
                elif msg[0].lower() == "!db":
                    cmd = msg.split("!db ")[1]

                # Business admin commands like add a business or delete a business.
                elif msg[0].lower().split("_")[0] == "!business":

                    if len(msg) == 1:
                        senderUser(id, "!business_add [ID] [NAME] [TYPE] [LEADER_VK_ID]\n\n!business_delete [ID]")

                    if msg[0].lower().split("_")[1] == "add":
                        if len(msg) == 5:
                            senderUser(id, db.business_add(msg[1], msg[2], msg[3], int(msg[4])))

                    elif msg[0].lower().split("_")[1] == "delete":
                        senderUser(id, db.business_delete(msg[1]))

                #  Set the citizenship value.
                elif msg[0].lower() == "!citizenship":

                    if len(msg) == 1: 
                        senderUser(id, "!citizenship [DB_ID] [VALUE]")

                    if len(msg) == 3:
                        db.citizenship(msg[1], bool(msg[2]))
                        senderUser(id, f"CITIZEN SHIP {int(msg[1])} ({db.get_account_info(None, int(msg[1]))[0][2]}) SET TO {bool(msg[2])}.")                    


        except Exception as e: 
            senderUser(id, f"Failed! \nexit code: 1. \nException: {e}.")
            logger.exception(f"Failed with exit code: 1; \nEB: for_user.py/001")

    # Map
    elif (msg[0].lower() == "–∫–∞—Ä—Ç–∞"):
        map_message = "[–î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´]"
        vk_session.method("messages.send", {"peer_id": id, "message": map_message, "attachment": "photo-‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà_‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", "random_id": 0})

    else:
        senderUser(id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–æ–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')
        # raise TypeError("Test exception.")